PROJECT(libSDL2pp)

# meta
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

set( SDL2-DIR-HINT SDL2-devel)
if(CMAKE_LIBRARY_ARCHITECTURE)
	else()
		if (${CMAKE_SIZEOF_VOID_P} MATCHES "4")
			set( CMAKE_LIBRARY_ARCHITECTURE x86 )
		else()
			set( CMAKE_LIBRARY_ARCHITECTURE x64 )
		endif()
	endif()

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/../modules)

IF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
	OPTION(SDL2PP_WITH_IMAGE "Enable SDL2_image support" ON)
ELSE(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
	# please set SDL2PP_WITH_IMAGE in parent project as needed
ENDIF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)

# depends
FIND_PACKAGE(SDL2 REQUIRED)
FIND_PACKAGE(SDL2_image REQUIRED)
FIND_PACKAGE(SDL2_ttf REQUIRED)
SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_INCLUDE_DIR})
SET(SDL2_ALL_LIBRARIES ${SDL2_LIBRARY})
IF(SDL2PP_WITH_IMAGE)
	FIND_PACKAGE(SDL2_image REQUIRED)
	SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_ALL_INCLUDE_DIRS} ${SDL2_IMAGE_INCLUDE_DIR} ${SDL2_TTF_INCLUDE_DIR})
	SET(SDL2_ALL_LIBRARIES ${SDL2_ALL_LIBRARIES} ${SDL2_IMAGE_LIBRARY} ${SDL2_TTF_LIBRARY})
ELSE(SDL2PP_WITH_IMAGE)
	MESSAGE(STATUS "SDL2_image support disabled")
ENDIF(SDL2PP_WITH_IMAGE)

# compiler flags & definitions
IF(MSVC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3")
	SET(WERROR_FLAG "/WX")
ELSE(MSVC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -pedantic")
	SET(WERROR_FLAG "-Werror")
ENDIF(MSVC)

INCLUDE_DIRECTORIES(BEFORE ${PROJECT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${SDL2_ALL_INCLUDE_DIRS})

# config.h
CONFIGURE_FILE(
	SDL2pp/Config.hh.in
	SDL2pp/Config.hh
)

INCLUDE_DIRECTORIES(BEFORE ${PROJECT_BINARY_DIR})

# sources
SET(LIBRARY_SOURCES
	SDL2pp/Exception.cc
	SDL2pp/Point.cc
	SDL2pp/RWops.cc
	SDL2pp/Rect.cc
	SDL2pp/Renderer.cc
	SDL2pp/SDL.cc
	SDL2pp/Texture.cc
	SDL2pp/Window.cc
)

SET(LIBRARY_HEADERS
	SDL2pp/Exception.hh
	SDL2pp/ExtraRWops.hh
	SDL2pp/Point.hh
	SDL2pp/RWops.hh
	SDL2pp/Rect.hh
	SDL2pp/Renderer.hh
	SDL2pp/SDL.hh
	SDL2pp/SDL2pp.hh
	SDL2pp/Texture.hh
	SDL2pp/Window.hh
)

IF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
	MESSAGE(STATUS "libSDL2pp standalone build")

	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WERROR_FLAG}")

	# library
	ADD_LIBRARY(SDL2pp SHARED ${LIBRARY_SOURCES} ${LIBRARY_HEADERS})
	TARGET_LINK_LIBRARIES(SDL2pp ${SDL2_ALL_LIBRARIES})

	# demos and tests
	OPTION(RUN_GUI_TESTS "Run GUI tests (requires X11 display)" ON)
	ENABLE_TESTING()

	ADD_SUBDIRECTORY(demos)
	ADD_SUBDIRECTORY(tests)
ELSE(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
	MESSAGE(STATUS "libSDL2pp bundled build")

	# library
	ADD_LIBRARY(SDL2pp STATIC ${LIBRARY_SOURCES} ${LIBRARY_HEADERS})

	# provide variables to parent
	SET(SDL2PP_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/SDL2pp ${CMAKE_CURRENT_BINARY_DIR}  ${SDL2_ALL_INCLUDE_DIRS} PARENT_SCOPE)
	SET(SDL2PP_LIBRARIES SDL2pp ${SDL2_ALL_LIBRARIES} PARENT_SCOPE)
	
ENDIF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
